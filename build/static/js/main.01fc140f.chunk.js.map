{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","width","height","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.01fc140f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\t\n\treturn(\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5 size=200x200'>\n      <img alt='robots' src={`https://robohash.org/${id}?set=set2` }width=\"200\" height=\"200\" />\n\t\t\t<div> \n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p> {email} </p>\n\t\t\t\t<p> ID: {id} </p>\n\t\t\t</div>\t\t\n\t\t</div>\n\t\t)\n\t}\n\n \nexport default Card;\n","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n\t\treturn (\n\t\t\t<div> \n\t\t\t{\n\t\t\t\trobots.map((user,i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t \t\t\t\t/>\n\t\t \t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t\t);\n\t}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n\treturn (\n\t\t<div className = 'pa3'>\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='Find your next buddy'\n\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 11,\n    name: 'Luna Chert',\n    username: 'Drine',\n    email: 'Leas_Ermott@dana.io'\n  },\n  {\n    id: 12,\n    name: 'Tina Duque',\n    username: 'Mori.Etanton',\n    email: 'Padberg@karina.biz'\n  },\n  {id: 13,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 14,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 15,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 16,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 17,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 18,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 19,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 20,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 21,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 22,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  },\n  {\n    id: 23,\n    name: 'Luna Chert',\n    username: 'Drine',\n    email: 'Leas_Ermott@dana.io'\n  },\n  {\n    id: 24,\n    name: 'Tina Duque',\n    username: 'Mori.Etanton',\n    email: 'Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox'\nimport {robots} from './robots';\nimport './app.css'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\treturn (\n\t\t  <div className='tc'>\n\t\t\t<h1 className='f1'> RoboBuddies </h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t<CardList robots = {filteredRobots} />\n\t\t </div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons' ;\n\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}